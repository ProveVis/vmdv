type token =
  | Module
  | Model
  | Var
  | Define
  | Init
  | Transition
  | Atomic
  | Spec
  | Int
  | Bool
  | Top
  | Bottom
  | AX
  | EX
  | AF
  | EG
  | AR
  | EU
  | Neg
  | Colon
  | Semicolon
  | Comma
  | Dot
  | LB1
  | RB1
  | LB2
  | RB2
  | LB3
  | RB3
  | And
  | Or
  | Equal
  | Assigno
  | Add
  | Minus
  | Mult
  | DotDot
  | Scalar
  | Nego
  | Ando
  | Oro
  | Non_equal
  | LT
  | GT
  | LE
  | GE
  | File_end
  | Id of (string)
  | I of (int)
  | B of (bool)

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
open Lexing
open Term
open Formula
open Modul

(********helper varaiables and functions for the parser*********)
let tmp_parameter_list = ref [] 
let tmp_var_list = ref []
let tmp_symbol_tbl = ref (Hashtbl.create 10)
let tmp_init_assign = ref [] 
let tmp_transitions = ref []
let tmp_atomic_tbl = ref (Hashtbl.create 5)
let tmp_spec_list = ref []

let clear_tmps () = 
	tmp_parameter_list := [];
	tmp_var_list := [];
	tmp_symbol_tbl := Hashtbl.create 10;
	tmp_init_assign := [];
	tmp_transitions := [];
	tmp_atomic_tbl := Hashtbl.create 5;
	tmp_spec_list := []

let tmp_state_var_list = ref []

let module_tbl = Hashtbl.create 5
let modl = ref {name="";
		parameter_list=[];
		var_list=[];
		symbol_tbl=Hashtbl.create 0;
		init_assign=[];
		transitions=[];
		atomic_tbl=Hashtbl.create 0;
		spec_list=[];}

let position_in_var_list v vl = 
  let rec position_from_start v1 vl1 i = 
    match vl1 with
    | [] -> -1
    | (s, e) :: vl1' -> if v1 = s then i else position_from_start v1 vl1' (i+1)
  in position_from_start v vl 0

let position_in_state_var_list sv svl = 
  let rec position_from_start v vl i = 
    match vl with
    | [] -> -1
    | s :: vl' -> if v = s then i else position_from_start v vl' (i+1)
  in position_from_start sv svl 0

let rec get_var_position vl vtl = 
  match vl with
  | [] -> print_endline "invalid nested variable encountered."; exit 1
  | [v] -> position_in_var_list v vtl
  | v :: vl' -> let pv = position_in_var_list v vtl in 
		if (pv = -1) then (print_endline (v^" is not defined."); exit 1) else 
		  (let vt = snd (List.nth vtl pv) in 
		   match vt with
		   | Module_type m -> pv + (get_var_position vl' m.var_list)
		   | _ -> print_endline (v^" is not a Module."); exit 1)

(*******tmp function*******)
let rec str_str_list sl = 
	match sl with
	| [] -> ""
	| [s] -> s
	| s :: sl' -> s^","^(str_str_list sl')

(**************************)


let rec find_scalar_position sc vtl = 
  let rec find_str_position s sl i = 
    match sl with
    | [] -> -1
    | s' :: sl' -> if s = s' then i else find_str_position s sl' (i+1) in 
  match vtl with
  | [] -> -1	
  | (s, Scalar_type sl) :: vtl' -> 
     let i1 = find_str_position sc sl 0 in 
     begin
		(*print_endline ("finding the position of "^sc^" in "^(str_str_list sl)^" and result is "^(string_of_int i1));*)
       if i1 = -1 then find_scalar_position sc vtl'
       else i1
     end
  | (s, et) :: vtl' -> find_scalar_position sc vtl'

let rec check_current_symbols stbl = 
  let tmp_s = ref "" in 
  let rec check_symbol s = 
    try
      match s with
      | Const i -> true
      | Parameter p -> true
      | Var v -> true
      | Symbol s1 -> Hashtbl.mem stbl s1
      | Add (e1, e2) -> (check_symbol e1) && (check_symbol e2)
      | Negi e1 -> check_symbol e1
      | Minus (e1, e2) -> (check_symbol e1) && (check_symbol e2)
      | Mult (e1, e2) -> (check_symbol e1) && (check_symbol e2)
      | Negb e1 -> check_symbol e1
      | Ando (e1, e2) -> (check_symbol e1) && (check_symbol e2)
      | Oro (e1, e2) -> (check_symbol e1) && (check_symbol e2)
      | Equal (e1, e2) -> (check_symbol e1) && (check_symbol e2)
      | _ -> false
    with
      Not_found -> false in
  Hashtbl.iter
    (fun a b -> if (!tmp_s = "") then (if not (check_symbol b) then tmp_s := a)) 
    stbl;
  !tmp_s
(***************************************************************)


	
	

# 173 "parser.ml"
let yytransl_const = [|
  257 (* Module *);
  258 (* Model *);
  259 (* Var *);
  260 (* Define *);
  261 (* Init *);
  262 (* Transition *);
  263 (* Atomic *);
  264 (* Spec *);
  265 (* Int *);
  266 (* Bool *);
  267 (* Top *);
  268 (* Bottom *);
  269 (* AX *);
  270 (* EX *);
  271 (* AF *);
  272 (* EG *);
  273 (* AR *);
  274 (* EU *);
  275 (* Neg *);
  276 (* Colon *);
  277 (* Semicolon *);
  278 (* Comma *);
  279 (* Dot *);
  280 (* LB1 *);
  281 (* RB1 *);
  282 (* LB2 *);
  283 (* RB2 *);
  284 (* LB3 *);
  285 (* RB3 *);
  286 (* And *);
  287 (* Or *);
  288 (* Equal *);
  289 (* Assigno *);
  290 (* Add *);
  291 (* Minus *);
  292 (* Mult *);
  293 (* DotDot *);
  294 (* Scalar *);
  295 (* Nego *);
  296 (* Ando *);
  297 (* Oro *);
  298 (* Non_equal *);
  299 (* LT *);
  300 (* GT *);
  301 (* LE *);
  302 (* GE *);
  303 (* File_end *);
    0|]

let yytransl_block = [|
  304 (* Id *);
  305 (* I *);
  306 (* B *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\003\000\003\000\
\003\000\010\000\010\000\010\000\010\000\011\000\011\000\011\000\
\004\000\012\000\012\000\007\000\013\000\013\000\014\000\014\000\
\014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
\014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
\014\000\005\000\016\000\016\000\016\000\018\000\018\000\018\000\
\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
\017\000\017\000\017\000\017\000\015\000\015\000\015\000\006\000\
\019\000\019\000\020\000\020\000\008\000\021\000\021\000\022\000\
\023\000\023\000\023\000\009\000\024\000\024\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\026\000\026\000\026\000\000\000"

let yylen = "\002\000\
\002\000\000\000\011\000\012\000\013\000\014\000\000\000\003\000\
\005\000\005\000\001\000\003\000\001\000\000\000\002\000\004\000\
\004\000\000\000\005\000\004\000\000\000\005\000\001\000\001\000\
\001\000\001\000\002\000\002\000\002\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\004\000\000\000\005\000\008\000\000\000\001\000\003\000\
\001\000\001\000\001\000\004\000\001\000\002\000\002\000\002\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\004\000\
\000\000\007\000\000\000\005\000\004\000\000\000\008\000\001\000\
\000\000\001\000\003\000\004\000\000\000\005\000\001\000\001\000\
\004\000\002\000\003\000\003\000\008\000\008\000\008\000\008\000\
\012\000\012\000\003\000\000\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\103\000\000\000\000\000\000\000\001\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\011\000\000\000\000\000\013\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\012\000\009\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\021\000\000\000\
\000\000\000\000\000\000\000\000\000\000\010\000\016\000\000\000\
\017\000\000\000\000\000\000\000\000\000\003\000\000\000\000\000\
\000\000\000\000\000\000\020\000\000\000\000\000\042\000\000\000\
\000\000\000\000\000\000\000\000\049\000\050\000\053\000\000\000\
\000\000\004\000\078\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\054\000\056\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\072\000\000\000\000\000\
\005\000\000\000\019\000\000\000\000\000\000\000\000\000\000\000\
\023\000\024\000\000\000\026\000\000\000\000\000\071\000\068\000\
\000\000\000\000\070\000\000\000\000\000\057\000\000\000\000\000\
\000\000\000\000\000\000\058\000\064\000\065\000\066\000\067\000\
\077\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\
\027\000\029\000\022\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\044\000\000\000\000\000\052\000\000\000\000\000\000\000\000\000\
\084\000\041\000\030\000\000\000\000\000\000\000\000\000\000\000\
\031\000\037\000\038\000\039\000\040\000\000\000\000\000\000\000\
\000\000\000\000\000\000\080\000\087\000\088\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\048\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\045\000\000\000\074\000\083\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\099\000\000\000\
\000\000\086\000\091\000\000\000\076\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\089\000\079\000\000\000\
\000\000\000\000\000\000\000\000\000\000\102\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\093\000\094\000\095\000\096\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\097\000\098\000"

let yydgoto = "\002\000\
\003\000\004\000\013\000\030\000\039\000\050\000\040\000\065\000\
\085\000\022\000\027\000\046\000\058\000\123\000\079\000\060\000\
\080\000\168\000\081\000\174\000\111\000\195\000\196\000\148\000\
\208\000\241\000"

let yysindex = "\009\000\
\000\000\000\000\000\000\005\255\220\254\223\254\000\000\253\254\
\017\255\226\254\226\254\024\255\022\255\028\255\087\255\044\255\
\046\255\000\000\031\255\074\255\000\000\092\255\118\255\118\255\
\097\255\098\255\121\255\226\254\137\255\102\255\102\255\122\255\
\131\255\000\000\000\000\110\255\139\255\144\255\179\255\182\255\
\179\255\182\255\163\255\074\255\164\255\160\255\000\000\143\255\
\166\255\180\255\179\255\201\255\179\255\000\000\000\000\087\255\
\000\000\250\254\183\255\188\255\078\255\000\000\196\255\200\255\
\184\255\201\255\190\255\000\000\199\255\191\255\000\000\078\255\
\078\255\195\255\078\255\086\255\000\000\000\000\000\000\178\255\
\209\255\000\000\000\000\206\255\215\255\184\255\110\255\207\255\
\109\255\242\255\223\255\112\000\082\001\000\000\000\000\236\254\
\078\255\221\255\078\255\078\255\078\255\078\255\078\255\078\255\
\078\255\078\255\078\255\078\255\078\255\000\000\251\254\202\255\
\000\000\225\255\000\000\207\255\207\255\211\255\207\255\241\255\
\000\000\000\000\002\000\000\000\078\255\143\255\000\000\000\000\
\248\254\241\255\000\000\134\000\217\255\000\000\082\001\082\001\
\096\000\062\001\032\001\000\000\000\000\000\000\000\000\000\000\
\000\000\249\255\247\255\246\255\000\000\156\000\223\255\087\001\
\000\000\000\000\000\000\207\255\207\255\207\255\207\255\207\255\
\207\255\207\255\207\255\207\255\207\255\207\255\075\000\008\000\
\000\000\241\255\223\255\000\000\248\255\006\000\001\000\125\255\
\000\000\000\000\000\000\087\001\087\001\118\000\067\001\047\001\
\000\000\000\000\000\000\000\000\000\000\078\255\019\000\078\255\
\020\000\029\000\031\000\000\000\000\000\000\000\033\000\041\000\
\043\000\048\000\049\000\057\000\125\255\125\255\059\000\169\255\
\090\000\000\000\143\255\018\000\078\255\001\000\054\000\040\000\
\051\000\053\000\055\000\056\000\058\000\133\255\239\254\060\000\
\202\255\125\255\125\255\000\000\217\255\000\000\000\000\078\255\
\067\000\076\000\080\000\101\000\105\000\107\000\000\000\121\000\
\120\000\000\000\000\000\119\000\000\000\034\000\125\255\125\255\
\125\255\125\255\103\000\117\000\060\000\000\000\000\000\130\255\
\205\255\083\000\163\000\145\000\149\000\000\000\124\000\125\000\
\135\000\136\000\125\255\125\255\157\000\161\000\162\000\164\000\
\184\000\254\000\000\000\000\000\000\000\000\000\125\255\125\255\
\009\001\112\001\147\000\159\000\185\000\195\000\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\196\000\196\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\180\000\000\000\197\000\000\000\000\000\
\000\000\000\000\000\000\196\000\000\000\000\000\000\000\000\000\
\198\000\000\000\000\000\205\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\180\000\000\000\000\000\000\000\206\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\210\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\134\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\205\000\000\000\
\050\000\000\000\002\001\000\000\191\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\217\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\226\255\
\000\000\000\000\000\000\000\000\220\000\206\000\000\000\000\000\
\000\000\161\255\000\000\000\000\218\000\000\000\208\000\216\000\
\183\000\083\255\029\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\017\001\237\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\227\000\000\000\
\000\000\000\000\000\000\240\000\248\000\219\000\212\255\104\255\
\000\000\000\000\000\000\000\000\000\000\220\000\000\000\000\000\
\000\000\238\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\239\000\000\000\206\000\000\000\210\000\227\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\054\255\000\000\241\000\
\217\000\000\000\000\000\000\000\218\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\242\000\
\000\000\000\000\000\000\126\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\241\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\254\255\244\001\042\000\030\000\239\001\213\001\
\200\001\235\001\253\001\219\001\000\000\159\255\185\255\141\255\
\186\255\120\001\098\001\083\001\000\000\000\000\107\001\100\001\
\107\255\073\001"

let yytablesize = 655
let yytable = "\090\000\
\091\000\092\000\093\000\129\000\095\000\005\000\006\000\239\000\
\014\000\001\000\169\000\008\000\226\000\227\000\009\000\129\000\
\124\000\012\000\150\000\152\000\010\000\154\000\068\000\145\000\
\131\000\035\000\132\000\130\000\134\000\135\000\136\000\137\000\
\138\000\139\000\140\000\141\000\142\000\143\000\144\000\170\000\
\011\000\069\000\146\000\015\000\151\000\124\000\016\000\124\000\
\060\000\060\000\060\000\007\000\017\000\060\000\167\000\222\000\
\223\000\171\000\179\000\180\000\181\000\182\000\183\000\184\000\
\185\000\186\000\187\000\188\000\189\000\060\000\052\000\023\000\
\041\000\024\000\090\000\090\000\243\000\244\000\090\000\025\000\
\063\000\051\000\066\000\053\000\124\000\124\000\124\000\124\000\
\124\000\124\000\124\000\124\000\124\000\124\000\124\000\228\000\
\018\000\000\001\001\001\002\001\003\001\072\000\059\000\059\000\
\059\000\037\000\038\000\059\000\096\000\097\000\019\000\026\000\
\073\000\028\000\020\000\074\000\075\000\017\001\018\001\209\000\
\029\000\212\000\059\000\059\000\033\000\076\000\077\000\078\000\
\033\000\025\001\026\001\096\000\125\000\032\000\021\000\197\000\
\198\000\199\000\200\000\201\000\202\000\203\000\204\000\205\000\
\033\000\033\000\092\000\092\000\206\000\034\000\092\000\007\001\
\044\000\051\000\051\000\051\000\092\000\045\000\051\000\226\000\
\227\000\246\000\226\000\227\000\036\000\051\000\047\000\051\000\
\051\000\051\000\043\000\048\000\207\000\051\000\051\000\051\000\
\051\000\051\000\051\000\051\000\069\000\069\000\069\000\056\000\
\049\000\069\000\038\000\054\000\057\000\225\000\059\000\084\000\
\069\000\061\000\069\000\069\000\069\000\098\000\226\000\227\000\
\069\000\069\000\069\000\069\000\069\000\069\000\069\000\064\000\
\062\000\099\000\087\000\100\000\101\000\102\000\072\000\070\000\
\071\000\103\000\104\000\105\000\106\000\107\000\108\000\109\000\
\082\000\073\000\008\001\083\000\074\000\075\000\116\000\088\000\
\032\000\112\000\226\000\227\000\032\000\110\000\089\000\077\000\
\078\000\117\000\094\000\113\000\118\000\119\000\025\000\127\000\
\133\000\147\000\025\000\032\000\032\000\149\000\120\000\121\000\
\122\000\025\000\153\000\025\000\025\000\025\000\126\000\096\000\
\173\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\175\000\099\000\177\000\100\000\101\000\102\000\155\000\176\000\
\192\000\103\000\104\000\105\000\106\000\107\000\108\000\109\000\
\191\000\156\000\193\000\157\000\158\000\159\000\229\000\211\000\
\213\000\160\000\161\000\162\000\163\000\164\000\165\000\166\000\
\194\000\099\000\214\000\100\000\101\000\102\000\255\000\215\000\
\216\000\103\000\104\000\105\000\106\000\107\000\108\000\109\000\
\217\000\099\000\218\000\100\000\101\000\102\000\051\000\219\000\
\220\000\103\000\104\000\105\000\106\000\107\000\108\000\109\000\
\221\000\051\000\224\000\051\000\051\000\051\000\232\000\233\000\
\247\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
\190\000\248\000\234\000\172\000\235\000\249\000\236\000\237\000\
\009\001\238\000\099\000\240\000\100\000\101\000\102\000\190\000\
\226\000\227\000\103\000\104\000\105\000\106\000\107\000\108\000\
\109\000\099\000\250\000\100\000\101\000\102\000\251\000\099\000\
\252\000\103\000\104\000\105\000\106\000\107\000\108\000\109\000\
\128\000\105\000\106\000\107\000\108\000\109\000\253\000\099\000\
\254\000\100\000\101\000\102\000\226\000\156\000\004\001\103\000\
\104\000\105\000\106\000\107\000\108\000\109\000\172\000\162\000\
\163\000\164\000\165\000\166\000\005\001\099\000\011\001\100\000\
\101\000\102\000\012\001\013\001\014\001\103\000\104\000\105\000\
\106\000\107\000\108\000\109\000\178\000\019\001\015\001\016\001\
\010\001\020\001\021\001\156\000\022\001\157\000\158\000\159\000\
\226\000\227\000\029\001\160\000\161\000\162\000\163\000\164\000\
\165\000\166\000\063\000\063\000\063\000\023\001\030\001\063\000\
\014\000\031\001\055\000\055\000\055\000\226\000\227\000\055\000\
\063\000\063\000\063\000\032\001\007\000\008\000\063\000\063\000\
\055\000\055\000\015\000\061\000\061\000\061\000\055\000\055\000\
\061\000\018\000\043\000\062\000\062\000\062\000\073\000\036\000\
\062\000\061\000\061\000\036\000\046\000\085\000\075\000\061\000\
\061\000\062\000\062\000\081\000\036\000\036\000\036\000\062\000\
\062\000\028\000\036\000\036\000\034\000\028\000\082\000\047\000\
\034\000\100\000\101\000\031\000\035\000\042\000\028\000\028\000\
\035\000\034\000\034\000\024\001\028\000\028\000\086\000\034\000\
\034\000\035\000\035\000\226\000\227\000\114\000\027\001\035\000\
\035\000\053\000\067\000\053\000\053\000\053\000\226\000\227\000\
\055\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
\026\000\115\000\026\000\026\000\026\000\210\000\230\000\245\000\
\026\000\026\000\026\000\026\000\026\000\026\000\026\000\099\000\
\231\000\100\000\101\000\102\000\242\000\006\001\000\000\103\000\
\000\000\105\000\106\000\107\000\108\000\109\000\156\000\000\000\
\157\000\158\000\159\000\000\000\000\000\000\000\160\000\000\000\
\162\000\163\000\164\000\165\000\166\000\099\000\000\000\100\000\
\101\000\102\000\156\000\000\000\157\000\158\000\159\000\105\000\
\106\000\107\000\108\000\109\000\162\000\163\000\164\000\165\000\
\166\000\099\000\000\000\000\000\000\000\102\000\156\000\000\000\
\000\000\000\000\159\000\105\000\106\000\107\000\108\000\109\000\
\162\000\163\000\164\000\165\000\166\000\028\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\226\000\227\000"

let yycheck = "\070\000\
\072\000\072\000\073\000\024\001\075\000\001\001\002\001\025\001\
\011\000\001\000\126\000\048\001\030\001\031\001\048\001\024\001\
\088\000\048\001\116\000\117\000\024\001\119\000\029\001\029\001\
\096\000\028\000\097\000\048\001\099\000\100\000\101\000\102\000\
\103\000\104\000\105\000\106\000\107\000\108\000\109\000\048\001\
\024\001\048\001\048\001\020\001\116\000\117\000\025\001\119\000\
\020\001\021\001\022\001\047\001\025\001\025\001\125\000\205\000\
\206\000\129\000\156\000\157\000\158\000\159\000\160\000\161\000\
\162\000\163\000\164\000\165\000\166\000\041\001\041\000\028\001\
\031\000\028\001\021\001\022\001\226\000\227\000\025\001\049\001\
\051\000\040\000\053\000\042\000\156\000\157\000\158\000\159\000\
\160\000\161\000\162\000\163\000\164\000\165\000\166\000\211\000\
\010\001\247\000\248\000\249\000\250\000\024\001\020\001\021\001\
\022\001\004\001\005\001\025\001\023\001\024\001\024\001\038\001\
\035\001\022\001\028\001\038\001\039\001\011\001\012\001\190\000\
\003\001\192\000\040\001\041\001\021\001\048\001\049\001\050\001\
\025\001\023\001\024\001\023\001\024\001\037\001\048\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\041\001\048\001\021\001\022\001\024\001\029\001\025\001\022\001\
\022\001\020\001\021\001\022\001\031\001\048\001\025\001\030\001\
\031\001\232\000\030\001\031\001\028\001\032\001\028\001\034\001\
\035\001\036\001\049\001\028\001\048\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\020\001\021\001\022\001\020\001\
\006\001\025\001\005\001\025\001\029\001\021\001\048\001\008\001\
\032\001\028\001\034\001\035\001\036\001\020\001\030\001\031\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\007\001\
\029\001\032\001\021\001\034\001\035\001\036\001\024\001\033\001\
\029\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\029\001\035\001\022\001\028\001\038\001\039\001\024\001\033\001\
\021\001\028\001\030\001\031\001\025\001\029\001\048\001\049\001\
\050\001\035\001\048\001\029\001\038\001\039\001\021\001\025\001\
\028\001\048\001\025\001\040\001\041\001\029\001\048\001\049\001\
\050\001\032\001\048\001\034\001\035\001\036\001\021\001\023\001\
\048\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\024\001\032\001\029\001\034\001\035\001\036\001\021\001\033\001\
\033\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\025\001\032\001\029\001\034\001\035\001\036\001\021\001\021\001\
\021\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\048\001\032\001\022\001\034\001\035\001\036\001\021\001\025\001\
\024\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\024\001\032\001\024\001\034\001\035\001\036\001\021\001\024\001\
\024\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\024\001\032\001\024\001\034\001\035\001\036\001\033\001\048\001\
\022\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\022\001\022\001\048\001\025\001\048\001\022\001\048\001\048\001\
\022\001\048\001\032\001\048\001\034\001\035\001\036\001\022\001\
\030\001\031\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\032\001\022\001\034\001\035\001\036\001\022\001\032\001\
\022\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\025\001\042\001\043\001\044\001\045\001\046\001\022\001\032\001\
\025\001\034\001\035\001\036\001\030\001\032\001\048\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\025\001\042\001\
\043\001\044\001\045\001\046\001\048\001\032\001\022\001\034\001\
\035\001\036\001\022\001\048\001\048\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\025\001\025\001\048\001\048\001\
\022\001\025\001\025\001\032\001\025\001\034\001\035\001\036\001\
\030\001\031\001\048\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\020\001\021\001\022\001\022\001\048\001\025\001\
\029\001\025\001\020\001\021\001\022\001\030\001\031\001\025\001\
\034\001\035\001\036\001\025\001\025\001\025\001\040\001\041\001\
\034\001\035\001\029\001\020\001\021\001\022\001\040\001\041\001\
\025\001\029\001\029\001\020\001\021\001\022\001\029\001\021\001\
\025\001\034\001\035\001\025\001\025\001\029\001\029\001\040\001\
\041\001\034\001\035\001\025\001\034\001\035\001\036\001\040\001\
\041\001\021\001\040\001\041\001\021\001\025\001\025\001\025\001\
\025\001\025\001\025\001\024\000\021\001\031\000\034\001\035\001\
\025\001\034\001\035\001\022\001\040\001\041\001\066\000\040\001\
\041\001\034\001\035\001\030\001\031\001\086\000\022\001\040\001\
\041\001\032\001\056\000\034\001\035\001\036\001\030\001\031\001\
\044\000\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\032\001\087\000\034\001\035\001\036\001\190\000\213\000\229\000\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\032\001\
\214\000\034\001\035\001\036\001\225\000\253\000\255\255\040\001\
\255\255\042\001\043\001\044\001\045\001\046\001\032\001\255\255\
\034\001\035\001\036\001\255\255\255\255\255\255\040\001\255\255\
\042\001\043\001\044\001\045\001\046\001\032\001\255\255\034\001\
\035\001\036\001\032\001\255\255\034\001\035\001\036\001\042\001\
\043\001\044\001\045\001\046\001\042\001\043\001\044\001\045\001\
\046\001\032\001\255\255\255\255\255\255\036\001\032\001\255\255\
\255\255\255\255\036\001\042\001\043\001\044\001\045\001\046\001\
\042\001\043\001\044\001\045\001\046\001\022\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\030\001\031\001"

let yynames_const = "\
  Module\000\
  Model\000\
  Var\000\
  Define\000\
  Init\000\
  Transition\000\
  Atomic\000\
  Spec\000\
  Int\000\
  Bool\000\
  Top\000\
  Bottom\000\
  AX\000\
  EX\000\
  AF\000\
  EG\000\
  AR\000\
  EU\000\
  Neg\000\
  Colon\000\
  Semicolon\000\
  Comma\000\
  Dot\000\
  LB1\000\
  RB1\000\
  LB2\000\
  RB2\000\
  LB3\000\
  RB3\000\
  And\000\
  Or\000\
  Equal\000\
  Assigno\000\
  Add\000\
  Minus\000\
  Mult\000\
  DotDot\000\
  Scalar\000\
  Nego\000\
  Ando\000\
  Oro\000\
  Non_equal\000\
  LT\000\
  GT\000\
  LE\000\
  GE\000\
  File_end\000\
  "

let yynames_block = "\
  Id\000\
  I\000\
  B\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'inputs) in
    Obj.repr(
# 143 "parser.mly"
                       ((module_tbl, !modl))
# 618 "parser.ml"
               : (((string, Modul.modul) Hashtbl.t) * Modul.modul)))
; (fun __caml_parser_env ->
    Obj.repr(
# 147 "parser.mly"
                     ()
# 624 "parser.ml"
               : 'inputs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 10 : 'inputs) in
    let _3 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 6 : 'parameters) in
    let _8 = (Parsing.peek_val __caml_parser_env 3 : 'var_decl) in
    let _9 = (Parsing.peek_val __caml_parser_env 2 : 'init_decl) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'trans_decl) in
    Obj.repr(
# 149 "parser.mly"
       (tmp_parameter_list := _5; 
	Hashtbl.add module_tbl _3 
	  {name = _3;
	   parameter_list = !tmp_parameter_list;
	   var_list = !tmp_var_list;
	   symbol_tbl = Hashtbl.create 0;
	   init_assign = !tmp_init_assign;
	   transitions = !tmp_transitions; 
	   atomic_tbl = !tmp_atomic_tbl;
	   spec_list = !tmp_spec_list
	  };
	clear_tmps ())
# 647 "parser.ml"
               : 'inputs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 11 : 'inputs) in
    let _3 = (Parsing.peek_val __caml_parser_env 9 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 7 : 'parameters) in
    let _8 = (Parsing.peek_val __caml_parser_env 4 : 'var_decl) in
    let _9 = (Parsing.peek_val __caml_parser_env 3 : 'symbol_decl) in
    let _10 = (Parsing.peek_val __caml_parser_env 2 : 'init_decl) in
    let _11 = (Parsing.peek_val __caml_parser_env 1 : 'trans_decl) in
    Obj.repr(
# 162 "parser.mly"
       (tmp_parameter_list := _5;
	Hashtbl.add module_tbl _3 
	  {name = _3;
	   parameter_list = !tmp_parameter_list;
	   var_list = !tmp_var_list;
	   symbol_tbl = !tmp_symbol_tbl; 
	   init_assign = !tmp_init_assign;
	   transitions = !tmp_transitions;
	   atomic_tbl = !tmp_atomic_tbl;
	   spec_list = !tmp_spec_list
	  }; 
	clear_tmps ())
# 671 "parser.ml"
               : 'inputs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 12 : 'inputs) in
    let _3 = (Parsing.peek_val __caml_parser_env 10 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 8 : 'parameters) in
    let _8 = (Parsing.peek_val __caml_parser_env 5 : 'var_decl) in
    let _9 = (Parsing.peek_val __caml_parser_env 4 : 'init_decl) in
    let _10 = (Parsing.peek_val __caml_parser_env 3 : 'trans_decl) in
    let _11 = (Parsing.peek_val __caml_parser_env 2 : 'atomic_decl) in
    let _12 = (Parsing.peek_val __caml_parser_env 1 : 'spec_decl) in
    Obj.repr(
# 175 "parser.mly"
       (tmp_parameter_list := _5; 
	modl := {name = _3;
		 parameter_list = !tmp_parameter_list;
		 var_list = !tmp_var_list;
		 symbol_tbl = Hashtbl.create 0;
		 init_assign = !tmp_init_assign;
		 transitions = !tmp_transitions;
		 atomic_tbl = !tmp_atomic_tbl;
		 spec_list = !tmp_spec_list
		};
	clear_tmps ())
# 695 "parser.ml"
               : 'inputs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 13 : 'inputs) in
    let _3 = (Parsing.peek_val __caml_parser_env 11 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 9 : 'parameters) in
    let _8 = (Parsing.peek_val __caml_parser_env 6 : 'var_decl) in
    let _9 = (Parsing.peek_val __caml_parser_env 5 : 'symbol_decl) in
    let _10 = (Parsing.peek_val __caml_parser_env 4 : 'init_decl) in
    let _11 = (Parsing.peek_val __caml_parser_env 3 : 'trans_decl) in
    let _12 = (Parsing.peek_val __caml_parser_env 2 : 'atomic_decl) in
    let _13 = (Parsing.peek_val __caml_parser_env 1 : 'spec_decl) in
    Obj.repr(
# 187 "parser.mly"
       (tmp_parameter_list := _5;
	modl := {name = _3;
		 parameter_list = !tmp_parameter_list;
		 var_list = !tmp_var_list; 
		 symbol_tbl = !tmp_symbol_tbl; 
		 init_assign = !tmp_init_assign;
		 transitions = !tmp_transitions; 
		 atomic_tbl = !tmp_atomic_tbl;
		 spec_list = !tmp_spec_list
		}; 
	clear_tmps ())
# 720 "parser.ml"
               : 'inputs))
; (fun __caml_parser_env ->
    Obj.repr(
# 201 "parser.mly"
                    ([])
# 726 "parser.ml"
               : 'parameters))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr_type) in
    Obj.repr(
# 202 "parser.mly"
                        ([(_1, _3)])
# 734 "parser.ml"
               : 'parameters))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr_type) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'parameters) in
    Obj.repr(
# 203 "parser.mly"
                                         ((_1, _3)::_5)
# 743 "parser.ml"
               : 'parameters))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 207 "parser.mly"
                        (Int_type (_2, _4))
# 751 "parser.ml"
               : 'expr_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 208 "parser.mly"
          (Bool_type)
# 757 "parser.ml"
               : 'expr_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'scalars) in
    Obj.repr(
# 209 "parser.mly"
                     (Scalar_type _2)
# 764 "parser.ml"
               : 'expr_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 211 "parser.mly"
       (try
	  (let m = Hashtbl.find module_tbl _1 in (Module_type m))
	 with Not_found -> (print_endline ("module "^(_1)^" is not defined."); exit 1))
# 773 "parser.ml"
               : 'expr_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 217 "parser.mly"
     ([])
# 779 "parser.ml"
               : 'scalars))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 218 "parser.mly"
               ([_2])
# 786 "parser.ml"
               : 'scalars))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'scalars) in
    Obj.repr(
# 219 "parser.mly"
                             (_2 :: _4)
# 794 "parser.ml"
               : 'scalars))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'vars) in
    Obj.repr(
# 222 "parser.mly"
                           (tmp_var_list := _3)
# 801 "parser.ml"
               : 'var_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 225 "parser.mly"
       ([])
# 807 "parser.ml"
               : 'vars))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr_type) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'vars) in
    Obj.repr(
# 226 "parser.mly"
                                     ((_1, _3)::_5)
# 816 "parser.ml"
               : 'vars))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'symbols) in
    Obj.repr(
# 230 "parser.mly"
  (let undef_s = check_current_symbols !tmp_symbol_tbl in
   if undef_s = "" then ()
   else print_endline (undef_s^" is not defined."); 
   exit 1)
# 826 "parser.ml"
               : 'symbol_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 236 "parser.mly"
          ()
# 832 "parser.ml"
               : 'symbols))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'symbols) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'dexp) in
    Obj.repr(
# 237 "parser.mly"
                                     (Hashtbl.add !tmp_symbol_tbl _2 _4)
# 841 "parser.ml"
               : 'symbols))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 241 "parser.mly"
     (Const _1)
# 848 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 242 "parser.mly"
     (Const (if _1 then 1 else -1))
# 855 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 244 "parser.mly"
     (let i1 = position_in_var_list _1 !tmp_parameter_list in 
	     if (i1 <> -1) then (Parameter _1) 
	     else 
	       let i2 = position_in_var_list _1 !tmp_var_list in 
	       if(i2 <> -1) then (Var i2) 
	       else (Symbol _1))
# 867 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'nested_var) in
    Obj.repr(
# 250 "parser.mly"
               (Var (get_var_position _1 !tmp_var_list))
# 874 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 252 "parser.mly"
     (let i = find_scalar_position _2 !tmp_var_list in 
	     (if i = -1 then (print_endline ("unknown type for "^_2); exit 1)
	      else Const i))
# 883 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'dexp) in
    Obj.repr(
# 255 "parser.mly"
              (Negi _2)
# 890 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'dexp) in
    Obj.repr(
# 256 "parser.mly"
             (Negb _2)
# 897 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dexp) in
    Obj.repr(
# 257 "parser.mly"
                   (Equal (_1, _3))
# 905 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dexp) in
    Obj.repr(
# 258 "parser.mly"
                       (Negb (Equal (_1, _3)))
# 913 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dexp) in
    Obj.repr(
# 259 "parser.mly"
                  (Ando (_1, _3))
# 921 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dexp) in
    Obj.repr(
# 260 "parser.mly"
                  (Oro (_1, _3))
# 929 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dexp) in
    Obj.repr(
# 261 "parser.mly"
                         (Add (_1, _3))
# 937 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dexp) in
    Obj.repr(
# 262 "parser.mly"
                   (Minus (_1, _3))
# 945 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dexp) in
    Obj.repr(
# 263 "parser.mly"
                  (Mult (_1, _3))
# 953 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dexp) in
    Obj.repr(
# 264 "parser.mly"
                (LT (_1, _3))
# 961 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dexp) in
    Obj.repr(
# 265 "parser.mly"
                (GT (_1, _3))
# 969 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dexp) in
    Obj.repr(
# 266 "parser.mly"
                (LE (_1, _3))
# 977 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dexp) in
    Obj.repr(
# 267 "parser.mly"
                (GE (_1, _3))
# 985 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'dexp) in
    Obj.repr(
# 268 "parser.mly"
                        (_2)
# 992 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'inis) in
    Obj.repr(
# 272 "parser.mly"
  (tmp_init_assign := _3)
# 999 "parser.ml"
               : 'init_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 275 "parser.mly"
       ([])
# 1005 "parser.ml"
               : 'inis))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'inis) in
    Obj.repr(
# 276 "parser.mly"
                                 ((Expr _3) :: _5)
# 1014 "parser.ml"
               : 'inis))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'exps) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'inis) in
    Obj.repr(
# 278 "parser.mly"
     ((Module_instance (_3, _5)) :: _8)
# 1024 "parser.ml"
               : 'inis))
; (fun __caml_parser_env ->
    Obj.repr(
# 281 "parser.mly"
       ([])
# 1030 "parser.ml"
               : 'exps))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 282 "parser.mly"
       ([_1])
# 1037 "parser.ml"
               : 'exps))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exps) in
    Obj.repr(
# 283 "parser.mly"
                  (_1 :: _3)
# 1045 "parser.ml"
               : 'exps))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 287 "parser.mly"
     (Const _1)
# 1052 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 288 "parser.mly"
     (Const (if _1 then 1 else -1))
# 1059 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 289 "parser.mly"
      (let i1 = position_in_var_list _1 !tmp_parameter_list in 
		 if (i1 <> -1) then (Parameter _1) else 
		   (let i2 = position_in_var_list _1 !tmp_var_list in 
		    if(i2 <> -1) then (Var i2) else 
		      (Symbol _1)))
# 1070 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 295 "parser.mly"
     (let i1 = position_in_state_var_list _1 !tmp_state_var_list in 
	     if (i1 = -1) then
	       begin
		 print_endline ("state variable "^_1^" is not defined."); 
		 exit 1;
	       end;
		 State_expr (i1, _3))
# 1084 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'nested_var) in
    Obj.repr(
# 302 "parser.mly"
               (Var (get_var_position _1 !tmp_var_list))
# 1091 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 304 "parser.mly"
     (let i = find_scalar_position _2 !tmp_var_list in
	     if i = -1 then (print_endline ("unknown type for "^_2); exit 1)
	     else (Const i))
# 1100 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 307 "parser.mly"
              (Negi _2)
# 1107 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 308 "parser.mly"
             (Negb _2)
# 1114 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 309 "parser.mly"
                 (Equal (_1, _3))
# 1122 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 310 "parser.mly"
                     (Negb (Equal (_1, _3)))
# 1130 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 311 "parser.mly"
                (Ando (_1, _3))
# 1138 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 312 "parser.mly"
               (Oro (_1, _3))
# 1146 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 313 "parser.mly"
               (Add (_1, _3))
# 1154 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 314 "parser.mly"
                 (Minus (_1, _3))
# 1162 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 315 "parser.mly"
                (Mult (_1, _3))
# 1170 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 316 "parser.mly"
              (LT (_1, _3))
# 1178 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 317 "parser.mly"
              (GT (_1, _3))
# 1186 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 318 "parser.mly"
              (LE (_1, _3))
# 1194 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 319 "parser.mly"
              (GE (_1, _3))
# 1202 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 320 "parser.mly"
               (_2)
# 1209 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 323 "parser.mly"
                      ([_1; _3])
# 1217 "parser.ml"
               : 'nested_var))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'nested_var) in
    Obj.repr(
# 324 "parser.mly"
                      (_1 :: _3)
# 1225 "parser.ml"
               : 'nested_var))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'nested_var) in
    Obj.repr(
# 325 "parser.mly"
                      (_2)
# 1232 "parser.ml"
               : 'nested_var))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'trans) in
    Obj.repr(
# 329 "parser.mly"
  (tmp_transitions := _3)
# 1239 "parser.ml"
               : 'trans_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 332 "parser.mly"
        ([])
# 1245 "parser.ml"
               : 'trans))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'rests) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'trans) in
    Obj.repr(
# 333 "parser.mly"
                                           ((_1, _4) :: _7)
# 1254 "parser.ml"
               : 'trans))
; (fun __caml_parser_env ->
    Obj.repr(
# 336 "parser.mly"
        ([])
# 1260 "parser.ml"
               : 'rests))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'rests) in
    Obj.repr(
# 338 "parser.mly"
     (let i = position_in_var_list _1 !tmp_var_list in
	     (if i = -1 then (print_endline (_1^" is not defined."); exit 1); (i, _3) :: _5 ))
# 1270 "parser.ml"
               : 'rests))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'atomics) in
    Obj.repr(
# 343 "parser.mly"
  (tmp_state_var_list := [])
# 1277 "parser.ml"
               : 'atomic_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 346 "parser.mly"
          ()
# 1283 "parser.ml"
               : 'atomics))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'atomics) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'bound_var) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 348 "parser.mly"
     (Hashtbl.add !tmp_atomic_tbl _2 _7)
# 1293 "parser.ml"
               : 'atomics))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bound_vars) in
    Obj.repr(
# 351 "parser.mly"
                      (tmp_state_var_list := _1)
# 1300 "parser.ml"
               : 'bound_var))
; (fun __caml_parser_env ->
    Obj.repr(
# 354 "parser.mly"
             ([])
# 1306 "parser.ml"
               : 'bound_vars))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 355 "parser.mly"
      ([_1])
# 1313 "parser.ml"
               : 'bound_vars))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bound_vars) in
    Obj.repr(
# 356 "parser.mly"
                        (_1 :: _3)
# 1321 "parser.ml"
               : 'bound_vars))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'specs) in
    Obj.repr(
# 360 "parser.mly"
  (tmp_spec_list := _3)
# 1328 "parser.ml"
               : 'spec_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 363 "parser.mly"
        ([])
# 1334 "parser.ml"
               : 'specs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'fml) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'specs) in
    Obj.repr(
# 364 "parser.mly"
                                  ((_1, _3) :: _5)
# 1343 "parser.ml"
               : 'specs))
; (fun __caml_parser_env ->
    Obj.repr(
# 367 "parser.mly"
          (Top)
# 1349 "parser.ml"
               : 'fml))
; (fun __caml_parser_env ->
    Obj.repr(
# 368 "parser.mly"
          (Bottom)
# 1355 "parser.ml"
               : 'fml))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'atom_fml_para) in
    Obj.repr(
# 369 "parser.mly"
                            (Atomic (_1, _3))
# 1363 "parser.ml"
               : 'fml))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fml) in
    Obj.repr(
# 370 "parser.mly"
           (Neg _2)
# 1370 "parser.ml"
               : 'fml))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'fml) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'fml) in
    Obj.repr(
# 371 "parser.mly"
               (And (_1, _3))
# 1378 "parser.ml"
               : 'fml))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'fml) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'fml) in
    Obj.repr(
# 372 "parser.mly"
              (Or (_1, _3))
# 1386 "parser.ml"
               : 'fml))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'fml) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 373 "parser.mly"
                                    (AX (SVar _3, _5, SVar _7))
# 1395 "parser.ml"
               : 'fml))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'fml) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 374 "parser.mly"
                                    (EX (SVar _3, _5, SVar _7))
# 1404 "parser.ml"
               : 'fml))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'fml) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 375 "parser.mly"
                                    (AF (SVar _3, _5, SVar _7))
# 1413 "parser.ml"
               : 'fml))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'fml) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 376 "parser.mly"
                                    (EG (SVar _3, _5, SVar _7))
# 1422 "parser.ml"
               : 'fml))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 9 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 5 : 'fml) in
    let _9 = (Parsing.peek_val __caml_parser_env 3 : 'fml) in
    let _11 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 378 "parser.mly"
     (AR (SVar _3, SVar _5, _7, _9, SVar _11))
# 1433 "parser.ml"
               : 'fml))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 9 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 5 : 'fml) in
    let _9 = (Parsing.peek_val __caml_parser_env 3 : 'fml) in
    let _11 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 380 "parser.mly"
     (EU (SVar _3, SVar _5, _7, _9, SVar _11))
# 1444 "parser.ml"
               : 'fml))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'fml) in
    Obj.repr(
# 381 "parser.mly"
                (_2)
# 1451 "parser.ml"
               : 'fml))
; (fun __caml_parser_env ->
    Obj.repr(
# 384 "parser.mly"
                ([])
# 1457 "parser.ml"
               : 'atom_fml_para))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 385 "parser.mly"
      ([SVar _1])
# 1464 "parser.ml"
               : 'atom_fml_para))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'atom_fml_para) in
    Obj.repr(
# 386 "parser.mly"
                          ((SVar _1) :: _3)
# 1472 "parser.ml"
               : 'atom_fml_para))
(* Entry input *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let input (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : (((string, Modul.modul) Hashtbl.t) * Modul.modul))
;;
# 390 "parser.mly"

# 1499 "parser.ml"
